/* eslint-disable @angular-eslint/directive-selector */
import { Directive, ElementRef, Input, Renderer2, } from '@angular/core';
import { filter } from 'rxjs/operators';
import { NgxUiLoaderService } from './ngx-ui-loader.service';
import { FOREGROUND, OVERLAY_DISAPPEAR_TIME, FAST_OVERLAY_DISAPPEAR_TIME, } from '../utils/constants';
export class NgxUiLoaderBlurredDirective {
    constructor(elementRef, renderer, loader) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.loader = loader;
        this.blur = this.loader.getDefaultConfig().blur;
        this.loaderId = this.loader.getDefaultConfig().masterLoaderId;
        this.fastFadeOut = this.loader.getDefaultConfig().fastFadeOut;
    }
    /**
     * On Init event
     */
    ngOnInit() {
        this.showForegroundWatcher = this.loader.showForeground$
            .pipe(filter((showEvent) => this.loaderId === showEvent.loaderId))
            .subscribe((data) => {
            if (data.isShow) {
                const filterValue = `blur(${this.blur}px)`;
                this.renderer.setStyle(this.elementRef.nativeElement, '-webkit-filter', filterValue);
                this.renderer.setStyle(this.elementRef.nativeElement, 'filter', filterValue);
            }
            else {
                setTimeout(() => {
                    if (!this.loader.hasRunningTask(FOREGROUND, data.loaderId)) {
                        this.renderer.setStyle(this.elementRef.nativeElement, '-webkit-filter', 'none');
                        this.renderer.setStyle(this.elementRef.nativeElement, 'filter', 'none');
                    }
                }, this.fastFadeOut
                    ? FAST_OVERLAY_DISAPPEAR_TIME
                    : OVERLAY_DISAPPEAR_TIME);
            }
        });
    }
    /**
     * On destroy event
     */
    ngOnDestroy() {
        if (this.showForegroundWatcher) {
            this.showForegroundWatcher.unsubscribe();
        }
    }
}
NgxUiLoaderBlurredDirective.decorators = [
    { type: Directive, args: [{ selector: '[ngxUiLoaderBlurred]' },] }
];
NgxUiLoaderBlurredDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgxUiLoaderService }
];
NgxUiLoaderBlurredDirective.propDecorators = {
    blur: [{ type: Input }],
    loaderId: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci1ibHVycmVkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC11aS1sb2FkZXIvc3JjL2xpYi9jb3JlL25neC11aS1sb2FkZXItYmx1cnJlZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFFTCxTQUFTLEdBRVYsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTdELE9BQU8sRUFDTCxVQUFVLEVBQ1Ysc0JBQXNCLEVBQ3RCLDJCQUEyQixHQUM1QixNQUFNLG9CQUFvQixDQUFDO0FBRzVCLE1BQU0sT0FBTywyQkFBMkI7SUFPdEMsWUFDVSxVQUFzQixFQUN0QixRQUFtQixFQUNuQixNQUEwQjtRQUYxQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7UUFFbEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDO1FBQ2hELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLGNBQWMsQ0FBQztRQUM5RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxXQUFXLENBQUM7SUFDaEUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWU7YUFDckQsSUFBSSxDQUNILE1BQU0sQ0FBQyxDQUFDLFNBQW9CLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN2RTthQUNBLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2xCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixNQUFNLFdBQVcsR0FBRyxRQUFRLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQztnQkFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUM3QixnQkFBZ0IsRUFDaEIsV0FBVyxDQUNaLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUM3QixRQUFRLEVBQ1IsV0FBVyxDQUNaLENBQUM7YUFDSDtpQkFBTTtnQkFDTCxVQUFVLENBQ1IsR0FBRyxFQUFFO29CQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO3dCQUMxRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQzdCLGdCQUFnQixFQUNoQixNQUFNLENBQ1AsQ0FBQzt3QkFDRixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQzdCLFFBQVEsRUFDUixNQUFNLENBQ1AsQ0FBQztxQkFDSDtnQkFDSCxDQUFDLEVBQ0QsSUFBSSxDQUFDLFdBQVc7b0JBQ2QsQ0FBQyxDQUFDLDJCQUEyQjtvQkFDN0IsQ0FBQyxDQUFDLHNCQUFzQixDQUMzQixDQUFDO2FBQ0g7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUM5QixJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDMUM7SUFDSCxDQUFDOzs7WUF0RUYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFOzs7WUFqQjdDLFVBQVU7WUFHVixTQUFTO1lBTUYsa0JBQWtCOzs7bUJBVXhCLEtBQUs7dUJBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEBhbmd1bGFyLWVzbGludC9kaXJlY3RpdmUtc2VsZWN0b3IgKi9cbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgUmVuZGVyZXIyLFxuICBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE5neFVpTG9hZGVyU2VydmljZSB9IGZyb20gJy4vbmd4LXVpLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFNob3dFdmVudCB9IGZyb20gJy4uL3V0aWxzL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtcbiAgRk9SRUdST1VORCxcbiAgT1ZFUkxBWV9ESVNBUFBFQVJfVElNRSxcbiAgRkFTVF9PVkVSTEFZX0RJU0FQUEVBUl9USU1FLFxufSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbmd4VWlMb2FkZXJCbHVycmVkXScgfSlcbmV4cG9ydCBjbGFzcyBOZ3hVaUxvYWRlckJsdXJyZWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGJsdXI6IG51bWJlcjtcbiAgQElucHV0KCkgbG9hZGVySWQ6IHN0cmluZztcblxuICBzaG93Rm9yZWdyb3VuZFdhdGNoZXI6IFN1YnNjcmlwdGlvbjtcbiAgZmFzdEZhZGVPdXQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIGxvYWRlcjogTmd4VWlMb2FkZXJTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuYmx1ciA9IHRoaXMubG9hZGVyLmdldERlZmF1bHRDb25maWcoKS5ibHVyO1xuICAgIHRoaXMubG9hZGVySWQgPSB0aGlzLmxvYWRlci5nZXREZWZhdWx0Q29uZmlnKCkubWFzdGVyTG9hZGVySWQ7XG4gICAgdGhpcy5mYXN0RmFkZU91dCA9IHRoaXMubG9hZGVyLmdldERlZmF1bHRDb25maWcoKS5mYXN0RmFkZU91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbiBJbml0IGV2ZW50XG4gICAqL1xuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNob3dGb3JlZ3JvdW5kV2F0Y2hlciA9IHRoaXMubG9hZGVyLnNob3dGb3JlZ3JvdW5kJFxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcigoc2hvd0V2ZW50OiBTaG93RXZlbnQpID0+IHRoaXMubG9hZGVySWQgPT09IHNob3dFdmVudC5sb2FkZXJJZClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKGRhdGEuaXNTaG93KSB7XG4gICAgICAgICAgY29uc3QgZmlsdGVyVmFsdWUgPSBgYmx1cigke3RoaXMuYmx1cn1weClgO1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICctd2Via2l0LWZpbHRlcicsXG4gICAgICAgICAgICBmaWx0ZXJWYWx1ZVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgJ2ZpbHRlcicsXG4gICAgICAgICAgICBmaWx0ZXJWYWx1ZVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0VGltZW91dChcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLmxvYWRlci5oYXNSdW5uaW5nVGFzayhGT1JFR1JPVU5ELCBkYXRhLmxvYWRlcklkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG4gICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICctd2Via2l0LWZpbHRlcicsXG4gICAgICAgICAgICAgICAgICAnbm9uZSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoXG4gICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICdmaWx0ZXInLFxuICAgICAgICAgICAgICAgICAgJ25vbmUnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRoaXMuZmFzdEZhZGVPdXRcbiAgICAgICAgICAgICAgPyBGQVNUX09WRVJMQVlfRElTQVBQRUFSX1RJTUVcbiAgICAgICAgICAgICAgOiBPVkVSTEFZX0RJU0FQUEVBUl9USU1FXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT24gZGVzdHJveSBldmVudFxuICAgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuc2hvd0ZvcmVncm91bmRXYXRjaGVyKSB7XG4gICAgICB0aGlzLnNob3dGb3JlZ3JvdW5kV2F0Y2hlci51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19