{"version":3,"sources":["../../../projects/ngx-ui-loader/src/lib/utils/enums.ts","../../../projects/ngx-ui-loader/src/lib/utils/constants.ts","../../../projects/ngx-ui-loader/src/lib/core/ngx-ui-loader-config.token.ts","../../../projects/ngx-ui-loader/src/lib/core/ngx-ui-loader.service.ts","../../../projects/ngx-ui-loader/src/lib/core/ngx-ui-loader.component.ts","../../../projects/ngx-ui-loader/src/lib/core/ngx-ui-loader-blurred.directive.ts","../../../projects/ngx-ui-loader/src/lib/core/ngx-ui-loader.module.ts","../../../projects/ngx-ui-loader/src/lib/router/ngx-ui-loader-router-config.token.ts","../../../projects/ngx-ui-loader/src/lib/utils/functions.ts","../../../projects/ngx-ui-loader/src/lib/router/ngx-ui-loader-router.module.ts","../../../projects/ngx-ui-loader/src/lib/http/ngx-ui-loader-http-config.token.ts","../../../projects/ngx-ui-loader/src/lib/http/ngx-ui-loader-http.interceptor.ts","../../../projects/ngx-ui-loader/src/lib/http/ngx-ui-loader-http.module.ts"],"names":["SPINNER","POSITION","PB_DIRECTION","DEFAULT_FG_TASK_ID","DEFAULT_BG_TASK_ID","DEFAULT_TIME","BACKGROUND","FOREGROUND","HTTP_LOADER_TASK_ID","ROUTER_LOADER_TASK_ID","SPINNER_CONFIG","ball-scale-multiple","divs","class","ball-spin","ball-spin-clockwise","ball-spin-clockwise-fade-rotating","ball-spin-fade-rotating","chasing-dots","circle","cube-grid","double-bounce","fading-circle","folding-cube","pulse","rectangle-bounce","rectangle-bounce-party","rectangle-bounce-pulse-out","rectangle-bounce-pulse-out-rapid","rotating-plane","square-jelly-box","square-loader","three-bounce","three-strings","wandering-cubes","DEFAULT_CONFIG","bgsColor","bgsOpacity","bgsPosition","bottomRight","bgsSize","bgsType","ballSpinClockwise","blur","delay","fastFadeOut","fgsColor","fgsPosition","centerCenter","fgsSize","fgsType","gap","logoPosition","logoSize","logoUrl","masterLoaderId","overlayBorderRadius","overlayColor","pbColor","pbDirection","leftToRight","pbThickness","hasProgressBar","text","textColor","textPosition","maxTime","minTime","NGX_UI_LOADER_CONFIG_TOKEN","InjectionToken","NgxUiLoaderService","config","this","defaultConfig","Object","assign","loaders","showForeground","BehaviorSubject","loaderId","isShow","showForeground$","asObservable","showBackground","showBackground$","fgClosing","foregroundClosing$","bgClosing","backgroundClosing$","prototype","bindLoaderData","isMaster","isBound","Error","hasRunningTask","next","createLoaderData","destroyLoaderData","stopAllLoader","getDefaultConfig","getLoaders","JSON","parse","stringify","getLoader","startLoader","taskId","time","readyToStart","tasks","isOtherRunning","backgroundCloseout","start","startBackgroundLoader","startBackground","stopLoader","_this","readyToStop","foregroundCloseout","setTimeout","stop","stopBackgroundLoader","stopBackground","clearAllTimers","console","warn","stopAll","isForeground","tasks_1","startAt","keys","some","id","clearTimers","task","clearTimeout","delayTimer","maxTimer","minTimer","map","undefined","setDelayTimer","Date","now","setMaxTimer","isDelayed","setMinTimer","Injectable","args","providedIn","Optional","type","Inject","NgxUiLoaderComponent","domSanitizer","changeDetectorRef","ngxService","initialized","ngOnInit","initializeSpinners","determinePositions","trustedLogoUrl","bypassSecurityTrustResourceUrl","showForegroundWatcher","pipe","filter","showEvent","subscribe","data","markForCheck","showBackgroundWatcher","foregroundClosingWatcher","foregroundClosing","backgroundClosingWatcher","backgroundClosing","ngOnChanges","changes","bgsTypeChange","fgsTypeChange","logoUrlChange","ngOnDestroy","unsubscribe","fgDivs","Array","fill","fgSpinnerClass","bgDivs","bgSpinnerClass","logoTop","spinnerTop","textTop","startsWith","bypassSecurityTrustStyle","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","DomSanitizer","ChangeDetectorRef","Input","NgxUiLoaderBlurredDirective","elementRef","renderer","loader","filterValue","setStyle","nativeElement","Directive","ElementRef","Renderer2","NgxUiLoaderModule","forRoot","ngxUiLoaderConfig","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","declarations","exports","NGX_UI_LOADER_ROUTER_CONFIG_TOKEN","getExcludeObj","strs","regExps","exclude","url","toLowerCase","excludeRegexp","regexp","RegExp","isIgnored","excludeStrings","excludeRegexps","findIndex","str","test","NgxUiLoaderRouterModule","parentModule","customConfig","router","events","event","NavigationStart","NavigationEnd","NavigationCancel","NavigationError","routerConfig","decorators","SkipSelf","Router","NGX_UI_LOADER_HTTP_CONFIG_TOKEN","NgxUiLoaderHttpInterceptor","count","intercept","req","handle","finalize","NgxUiLoaderHttpModule","httpConfig","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Available spinner types\n */\nexport enum SPINNER {\n  ballScaleMultiple = 'ball-scale-multiple',\n  ballSpin = 'ball-spin',\n  ballSpinClockwise = 'ball-spin-clockwise',\n  ballSpinClockwiseFadeRotating = 'ball-spin-clockwise-fade-rotating',\n  ballSpinFadeRotating = 'ball-spin-fade-rotating',\n  chasingDots = 'chasing-dots',\n  circle = 'circle',\n  cubeGrid = 'cube-grid',\n  doubleBounce = 'double-bounce',\n  fadingCircle = 'fading-circle',\n  foldingCube = 'folding-cube',\n  pulse = 'pulse',\n  rectangleBounce = 'rectangle-bounce',\n  rectangleBounceParty = 'rectangle-bounce-party',\n  rectangleBouncePulseOut = 'rectangle-bounce-pulse-out',\n  rectangleBouncePulseOutRapid = 'rectangle-bounce-pulse-out-rapid',\n  rotatingPlane = 'rotating-plane',\n  squareJellyBox = 'square-jelly-box',\n  squareLoader = 'square-loader',\n  threeBounce = 'three-bounce',\n  threeStrings = 'three-strings',\n  wanderingCubes = 'wandering-cubes',\n}\n\n/**\n * Available postions\n */\nexport enum POSITION {\n  bottomCenter = 'bottom-center',\n  bottomLeft = 'bottom-left',\n  bottomRight = 'bottom-right',\n  centerCenter = 'center-center',\n  centerLeft = 'center-left',\n  centerRight = 'center-right',\n  topCenter = 'top-center',\n  topLeft = 'top-left',\n  topRight = 'top-right',\n}\n\n/**\n * Progress bar directions\n */\nexport enum PB_DIRECTION {\n  leftToRight = 'ltr',\n  rightToLeft = 'rtl',\n}\n","import { NgxUiLoaderConfig, Time } from '../utils/interfaces';\nimport { POSITION, PB_DIRECTION, SPINNER } from './enums';\n\n/**\n * The default value of foreground task id\n */\nexport const DEFAULT_FG_TASK_ID = 'fg-default';\n\n/**\n * The default value of background task id\n */\nexport const DEFAULT_BG_TASK_ID = 'bg-default';\n\n/**\n * The default value of loader id\n */\nexport const DEFAULT_MASTER_LOADER_ID = 'master';\n\nexport const DEFAULT_TIME: Time = {};\n\nexport const MIN_DELAY = 0;\n\nexport const MIN_TIME = 0;\n\nexport const CLOSING_TIME = 1001;\n\nexport const FAST_CLOSING_TIME = 601;\n\nexport const BACKGROUND = false;\n\nexport const FOREGROUND = true;\n\nexport const OVERLAY_DISAPPEAR_TIME = 500;\n\nexport const FAST_OVERLAY_DISAPPEAR_TIME = 300;\n\n/**\n * Http loader taskId\n */\nexport const HTTP_LOADER_TASK_ID = '$_http-loader';\n\n/**\n * Router loader taskId\n */\nexport const ROUTER_LOADER_TASK_ID = '$_router_loader';\n\n/**\n * The configuration of spinners\n */\nexport const SPINNER_CONFIG = {\n  'ball-scale-multiple': {\n    divs: 3,\n    class: 'sk-ball-scale-multiple',\n  },\n  'ball-spin': {\n    divs: 8,\n    class: 'sk-ball-spin',\n  },\n  'ball-spin-clockwise': {\n    divs: 8,\n    class: 'sk-ball-spin-clockwise',\n  },\n  'ball-spin-clockwise-fade-rotating': {\n    divs: 8,\n    class: 'sk-ball-spin-clockwise-fade-rotating',\n  },\n  'ball-spin-fade-rotating': {\n    divs: 8,\n    class: 'sk-ball-spin-fade-rotating',\n  },\n  'chasing-dots': {\n    divs: 2,\n    class: 'sk-chasing-dots',\n  },\n  circle: {\n    divs: 12,\n    class: 'sk-circle',\n  },\n  'cube-grid': {\n    divs: 9,\n    class: 'sk-cube-grid',\n  },\n  'double-bounce': {\n    divs: 2,\n    class: 'sk-double-bounce',\n  },\n  'fading-circle': {\n    divs: 12,\n    class: 'sk-fading-circle',\n  },\n  'folding-cube': {\n    divs: 4,\n    class: 'sk-folding-cube',\n  },\n  pulse: {\n    divs: 1,\n    class: 'sk-pulse',\n  },\n  'rectangle-bounce': {\n    divs: 5,\n    class: 'sk-rectangle-bounce',\n  },\n  'rectangle-bounce-party': {\n    divs: 5,\n    class: 'sk-rectangle-bounce-party',\n  },\n  'rectangle-bounce-pulse-out': {\n    divs: 5,\n    class: 'sk-rectangle-bounce-pulse-out',\n  },\n  'rectangle-bounce-pulse-out-rapid': {\n    divs: 5,\n    class: 'sk-rectangle-bounce-pulse-out-rapid',\n  },\n  'rotating-plane': {\n    divs: 1,\n    class: 'sk-rotating-plane',\n  },\n  'square-jelly-box': {\n    divs: 2,\n    class: 'sk-square-jelly-box',\n  },\n  'square-loader': {\n    divs: 1,\n    class: 'sk-square-loader',\n  },\n  'three-bounce': {\n    divs: 3,\n    class: 'sk-three-bounce',\n  },\n  'three-strings': {\n    divs: 3,\n    class: 'sk-three-strings',\n  },\n  'wandering-cubes': {\n    divs: 2,\n    class: 'sk-wandering-cubes',\n  },\n};\n\n/**\n * The default configuration of ngx-ui-loader\n */\nexport const DEFAULT_CONFIG: NgxUiLoaderConfig = {\n  bgsColor: '#00ACC1',\n  bgsOpacity: 0.5,\n  bgsPosition: POSITION.bottomRight,\n  bgsSize: 60,\n  bgsType: SPINNER.ballSpinClockwise,\n  blur: 5,\n  delay: 0,\n  fastFadeOut: false,\n  fgsColor: '#00ACC1',\n  fgsPosition: POSITION.centerCenter,\n  fgsSize: 60,\n  fgsType: SPINNER.ballSpinClockwise,\n  gap: 24,\n  logoPosition: POSITION.centerCenter,\n  logoSize: 120,\n  logoUrl: '',\n  masterLoaderId: DEFAULT_MASTER_LOADER_ID,\n  overlayBorderRadius: '0',\n  overlayColor: 'rgba(40, 40, 40, 0.8)',\n  pbColor: '#00ACC1',\n  pbDirection: PB_DIRECTION.leftToRight,\n  pbThickness: 3,\n  hasProgressBar: true,\n  text: '',\n  textColor: '#FFFFFF',\n  textPosition: POSITION.centerCenter,\n  maxTime: -1,\n  minTime: 300,\n};\n","import { InjectionToken } from '@angular/core';\nimport { NgxUiLoaderConfig } from '../utils/interfaces';\n\n/**\n * Injection token for ngx-ui-loader configuration\n */\nexport const NGX_UI_LOADER_CONFIG_TOKEN = new InjectionToken<NgxUiLoaderConfig>(\n  'ngxUiLoaderCustom.config'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport {\n  BACKGROUND,\n  CLOSING_TIME,\n  DEFAULT_BG_TASK_ID,\n  DEFAULT_CONFIG,\n  DEFAULT_FG_TASK_ID,\n  DEFAULT_TIME,\n  FAST_CLOSING_TIME,\n  FOREGROUND,\n  MIN_DELAY,\n  MIN_TIME,\n  OVERLAY_DISAPPEAR_TIME,\n  FAST_OVERLAY_DISAPPEAR_TIME,\n} from '../utils/constants';\nimport { NGX_UI_LOADER_CONFIG_TOKEN } from './ngx-ui-loader-config.token';\nimport { NgxUiLoaderConfig } from '../utils/interfaces';\nimport {\n  Loaders,\n  Loader,\n  ShowEvent,\n  Tasks,\n  Task,\n  Time,\n} from '../utils/interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgxUiLoaderService {\n  /**\n   * For internal use only.\n   *\n   * @docs-private\n   */\n  backgroundClosing$: Observable<ShowEvent>;\n\n  /**\n   * For internal use only.\n   *\n   * @docs-private\n   */\n  foregroundClosing$: Observable<ShowEvent>;\n\n  /**\n   * For internal use only.\n   *\n   * @docs-private\n   */\n  showBackground$: Observable<ShowEvent>;\n\n  /**\n   * For internal use only.\n   *\n   * @docs-private\n   */\n  showForeground$: Observable<ShowEvent>;\n\n  private bgClosing: BehaviorSubject<ShowEvent>;\n  private defaultConfig: NgxUiLoaderConfig;\n  private fgClosing: BehaviorSubject<ShowEvent>;\n  private loaders: Loaders;\n  private showBackground: BehaviorSubject<ShowEvent>;\n  private showForeground: BehaviorSubject<ShowEvent>;\n\n  /**\n   * Constructor\n   */\n  constructor(\n    @Optional()\n    @Inject(NGX_UI_LOADER_CONFIG_TOKEN)\n    private config: NgxUiLoaderConfig\n  ) {\n    this.defaultConfig = { ...DEFAULT_CONFIG };\n    if (this.config) {\n      if (this.config.minTime && this.config.minTime < MIN_TIME) {\n        this.config.minTime = MIN_TIME;\n      }\n      this.defaultConfig = { ...this.defaultConfig, ...this.config };\n    }\n    this.loaders = {};\n    this.showForeground = new BehaviorSubject<ShowEvent>({\n      loaderId: '',\n      isShow: false,\n    });\n    this.showForeground$ = this.showForeground.asObservable();\n    this.showBackground = new BehaviorSubject<ShowEvent>({\n      loaderId: '',\n      isShow: false,\n    });\n    this.showBackground$ = this.showBackground.asObservable();\n    this.fgClosing = new BehaviorSubject<ShowEvent>({\n      loaderId: '',\n      isShow: false,\n    });\n    this.foregroundClosing$ = this.fgClosing.asObservable();\n    this.bgClosing = new BehaviorSubject<ShowEvent>({\n      loaderId: '',\n      isShow: false,\n    });\n    this.backgroundClosing$ = this.bgClosing.asObservable();\n  }\n\n  /**\n   * For internal use only.\n   *\n   * @docs-private\n   */\n  bindLoaderData(loaderId: string): void {\n    const isMaster = loaderId === this.defaultConfig.masterLoaderId;\n    if (this.loaders[loaderId]) {\n      if (this.loaders[loaderId].isBound) {\n        throw new Error(\n          `[ngx-ui-loader] - loaderId \"${loaderId}\" is duplicated.`\n        );\n      }\n      this.loaders[loaderId].isBound = true;\n      this.loaders[loaderId].isMaster = isMaster;\n      // emit showEvent after data loader is bound\n      if (this.hasRunningTask(FOREGROUND, loaderId)) {\n        this.showForeground.next({ loaderId, isShow: true });\n      } else {\n        if (this.hasRunningTask(BACKGROUND, loaderId)) {\n          this.showBackground.next({ loaderId, isShow: true });\n        }\n      }\n    } else {\n      this.createLoaderData(loaderId, isMaster, true);\n    }\n  }\n\n  /**\n   * For internal use only.\n   *\n   * @docs-private\n   */\n  destroyLoaderData(loaderId: string): void {\n    this.stopAllLoader(loaderId);\n    delete this.loaders[loaderId];\n  }\n\n  /**\n   * Get default loader configuration\n   *\n   * @returns default configuration object\n   */\n  getDefaultConfig(): NgxUiLoaderConfig {\n    return { ...this.defaultConfig };\n  }\n\n  /**\n   * Get all the loaders\n   */\n  getLoaders(): Loaders {\n    return JSON.parse(JSON.stringify(this.loaders));\n  }\n\n  /**\n   * Get data of a specified loader. If loaderId is not provided, it will return data of\n   * master loader(if existed). Otherwise null is returned.\n   */\n  getLoader(loaderId?: string): Loader {\n    loaderId = loaderId ? loaderId : this.defaultConfig.masterLoaderId;\n    if (this.loaders[loaderId]) {\n      return JSON.parse(JSON.stringify(this.loaders[loaderId]));\n    }\n    return null;\n  }\n\n  /**\n   * Start the foreground loading of loader having `loaderId` with a specified `taskId`.\n   * The loading is only closed off when all taskIds of that loader are called with stopLoader() method.\n   *\n   * @param loaderId the loader Id\n   * @param taskId the optional task Id of the loading. taskId is set to 'fd-default' by default.\n   */\n  startLoader(\n    loaderId: string,\n    taskId: string = DEFAULT_FG_TASK_ID,\n    time?: Time\n  ): void {\n    if (!this.readyToStart(loaderId, taskId, true, time)) {\n      return;\n    }\n    if (!this.loaders[loaderId].tasks[taskId].isOtherRunning) {\n      // no other foreground task running\n      if (this.hasRunningTask(BACKGROUND, loaderId)) {\n        this.backgroundCloseout(loaderId);\n        this.showBackground.next({ loaderId, isShow: false });\n      }\n      this.showForeground.next({ loaderId, isShow: true });\n    }\n  }\n\n  /**\n   * Start the foreground loading of master loader with a specified `taskId`.\n   * The loading is only closed off when all taskIds of that loader are called with stop() method.\n   * NOTE: Really this function just wraps startLoader() function\n   *\n   * @param taskId the optional task Id of the loading. taskId is set to 'fd-default' by default.\n   */\n  start(taskId: string = DEFAULT_FG_TASK_ID, time?: Time): void {\n    this.startLoader(this.defaultConfig.masterLoaderId, taskId, time);\n  }\n\n  /**\n   * Start the background loading of loader having `loaderId` with a specified `taskId`.\n   * The loading is only closed off when all taskIds of that loader are called with stopLoaderBackground() method.\n   *\n   * @param loaderId the loader Id\n   * @param taskId the optional task Id of the loading. taskId is set to 'bg-default' by default.\n   */\n  startBackgroundLoader(\n    loaderId: string,\n    taskId: string = DEFAULT_BG_TASK_ID,\n    time?: Time\n  ): void {\n    if (!this.readyToStart(loaderId, taskId, false, time)) {\n      return;\n    }\n    if (\n      !this.hasRunningTask(FOREGROUND, loaderId) &&\n      !this.loaders[loaderId].tasks[taskId].isOtherRunning\n    ) {\n      this.showBackground.next({ loaderId, isShow: true });\n    }\n  }\n\n  /**\n   * Start the background loading of master loader with a specified `taskId`.\n   * The loading is only closed off when all taskIds of that loader are called with stopBackground() method.\n   * NOTE: Really this function just wraps startBackgroundLoader() function\n   *\n   * @param taskId the optional task Id of the loading. taskId is set to 'bg-default' by default.\n   */\n  startBackground(taskId: string = DEFAULT_BG_TASK_ID, time?: Time): void {\n    this.startBackgroundLoader(this.defaultConfig.masterLoaderId, taskId, time);\n  }\n\n  /**\n   * Stop a foreground loading of loader having `loaderId` with specific `taskId`\n   *\n   * @param loaderId the loader Id\n   * @param taskId the optional task Id to stop. If not provided, 'fg-default' is used.\n   * @returns Object\n   */\n  stopLoader(loaderId: string, taskId: string = DEFAULT_FG_TASK_ID): void {\n    if (!this.readyToStop(loaderId, taskId)) {\n      return;\n    }\n    if (!this.hasRunningTask(FOREGROUND, loaderId)) {\n      this.foregroundCloseout(loaderId);\n      this.showForeground.next({ loaderId, isShow: false });\n      if (this.hasRunningTask(BACKGROUND, loaderId)) {\n        setTimeout(\n          () => {\n            if (this.hasRunningTask(BACKGROUND, loaderId)) {\n              // still have background tasks\n              this.showBackground.next({ loaderId, isShow: true });\n            }\n          },\n          this.defaultConfig.fastFadeOut\n            ? FAST_OVERLAY_DISAPPEAR_TIME\n            : OVERLAY_DISAPPEAR_TIME\n        );\n      }\n    }\n  }\n\n  /**\n   * Stop a foreground loading of master loader with specific `taskId`\n   *\n   * @param taskId the optional task Id to stop. If not provided, 'fg-default' is used.\n   * @returns Object\n   */\n  stop(taskId: string = DEFAULT_FG_TASK_ID): void {\n    this.stopLoader(this.defaultConfig.masterLoaderId, taskId);\n  }\n\n  /**\n   * Stop a background loading of loader having `loaderId` with specific `taskId`\n   *\n   * @param loaderId the loader Id\n   * @param taskId the optional task Id to stop. If not provided, 'bg-default' is used.\n   * @returns Object\n   */\n  stopBackgroundLoader(\n    loaderId: string,\n    taskId: string = DEFAULT_BG_TASK_ID\n  ): void {\n    if (!this.readyToStop(loaderId, taskId)) {\n      return;\n    }\n    if (\n      !this.hasRunningTask(FOREGROUND, loaderId) &&\n      !this.hasRunningTask(BACKGROUND, loaderId)\n    ) {\n      this.backgroundCloseout(loaderId);\n      this.showBackground.next({ loaderId, isShow: false });\n    }\n  }\n\n  /**\n   * Stop a background loading of master loader with specific taskId\n   *\n   * @param taskId the optional task Id to stop. If not provided, 'bg-default' is used.\n   * @returns Object\n   */\n  stopBackground(taskId: string = DEFAULT_BG_TASK_ID): void {\n    this.stopBackgroundLoader(this.defaultConfig.masterLoaderId, taskId);\n  }\n\n  /**\n   * Stop all the background and foreground loadings of loader having `loaderId`\n   *\n   * @param loaderId the loader Id\n   */\n  stopAllLoader(loaderId: string): void {\n    if (!this.loaders[loaderId]) {\n      console.warn(`[ngx-ui-loader] - loaderId \"${loaderId}\" does not exist.`);\n      return;\n    }\n    if (this.hasRunningTask(FOREGROUND, loaderId)) {\n      this.foregroundCloseout(loaderId);\n      this.showForeground.next({ loaderId, isShow: false });\n    } else if (this.hasRunningTask(BACKGROUND, loaderId)) {\n      this.backgroundCloseout(loaderId);\n      this.showBackground.next({ loaderId, isShow: false });\n    }\n    this.clearAllTimers(this.loaders[loaderId].tasks);\n    this.loaders[loaderId].tasks = {};\n  }\n\n  /**\n   * Stop all the background and foreground loadings of master loader\n   */\n  stopAll(): void {\n    this.stopAllLoader(this.defaultConfig.masterLoaderId);\n  }\n\n  /**\n   * Check whether the specified loader has a running task with the given `taskId`.\n   * If no `taskId` specified, it will check whether the loader has any running tasks.\n   * For internal use only.\n   *\n   * @docs-private\n   * @param isForeground foreground task or background task\n   * @param loaderId the loader Id\n   * @param taskId the optional task Id\n   * @returns boolean\n   */\n  hasRunningTask(\n    isForeground: boolean,\n    loaderId: string,\n    taskId?: string\n  ): boolean {\n    if (this.loaders[loaderId]) {\n      const tasks: Tasks = this.loaders[loaderId].tasks;\n      if (taskId) {\n        return tasks[taskId] ? (tasks[taskId].startAt ? true : false) : false;\n      }\n      return Object.keys(tasks).some(\n        (id) => !!tasks[id].startAt && tasks[id].isForeground === isForeground\n      );\n    }\n    return false;\n  }\n\n  /**\n   * Create loader data if it does not exist\n   *\n   * @docs-private\n   */\n  private createLoaderData(\n    loaderId: string,\n    isMaster: boolean,\n    isBound: boolean\n  ): void {\n    if (!this.loaders[loaderId]) {\n      this.loaders[loaderId] = {\n        loaderId,\n        tasks: {},\n        isMaster,\n        isBound,\n      };\n    }\n  }\n\n  /**\n   * Manage to close foreground loading\n   *\n   * @docs-private\n   * @param loaderId the loader id\n   */\n  private foregroundCloseout(loaderId: string): void {\n    this.fgClosing.next({ loaderId, isShow: true });\n    setTimeout(\n      () => {\n        this.fgClosing.next({ loaderId, isShow: false });\n      },\n      this.defaultConfig.fastFadeOut ? FAST_CLOSING_TIME : CLOSING_TIME\n    );\n  }\n\n  /**\n   * Manage to close background loading\n   *\n   * @docs-private\n   * @param loaderId the loader id\n   */\n  private backgroundCloseout(loaderId: string): void {\n    this.bgClosing.next({ loaderId, isShow: true });\n    setTimeout(\n      () => {\n        this.bgClosing.next({ loaderId, isShow: false });\n      },\n      this.defaultConfig.fastFadeOut ? FAST_CLOSING_TIME : CLOSING_TIME\n    );\n  }\n\n  /**\n   * Clear all timers of the given task\n   *\n   * @docs-private\n   */\n  private clearTimers(task: Task): void {\n    clearTimeout(task.delayTimer);\n    clearTimeout(task.maxTimer);\n    clearTimeout(task.minTimer);\n  }\n\n  /**\n   * Clear all timers of the given tasks\n   *\n   * @docs-private\n   */\n  private clearAllTimers(tasks: Tasks): void {\n    Object.keys(tasks).map((id) => {\n      this.clearTimers(tasks[id]);\n    });\n  }\n\n  /**\n   * @docs-private\n   */\n  private readyToStart(\n    loaderId: string,\n    taskId: string,\n    isForeground: boolean,\n    time: Time = DEFAULT_TIME\n  ): boolean {\n    this.createLoaderData(loaderId, undefined, false);\n    const isOtherRunning = this.hasRunningTask(isForeground, loaderId);\n    if (!this.loaders[loaderId].tasks[taskId]) {\n      this.loaders[loaderId].tasks[taskId] = {\n        taskId,\n        isForeground,\n        minTime:\n          time.minTime >= MIN_TIME ? time.minTime : this.defaultConfig.minTime,\n        maxTime: time.maxTime ? time.maxTime : this.defaultConfig.maxTime,\n        delay: time.delay >= MIN_DELAY ? time.delay : this.defaultConfig.delay,\n      };\n    } else {\n      if (this.loaders[loaderId].tasks[taskId].isForeground !== isForeground) {\n        throw new Error(`[ngx-ui-loader] - taskId \"${taskId}\" is duplicated.`);\n      }\n    }\n    if (this.setDelayTimer(this.loaders[loaderId].tasks[taskId], loaderId)) {\n      return false;\n    }\n    this.loaders[loaderId].tasks[taskId] = {\n      ...this.loaders[loaderId].tasks[taskId],\n      isOtherRunning,\n      startAt: Date.now(),\n    };\n    this.setMaxTimer(this.loaders[loaderId].tasks[taskId], loaderId);\n    if (!this.loaders[loaderId].isBound) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * @docs-private\n   */\n  private readyToStop(loaderId: string, taskId: string): boolean {\n    if (!this.loaders[loaderId]) {\n      console.warn(`[ngx-ui-loader] - loaderId \"${loaderId}\" does not exist.`);\n      return false;\n    }\n    const task: Task = this.loaders[loaderId].tasks[taskId];\n    if (!task) {\n      return false;\n    }\n    if (task.isDelayed) {\n      this.clearTimers(task);\n      delete this.loaders[loaderId].tasks[taskId];\n      return false;\n    }\n    if (this.setMinTimer(task, loaderId)) {\n      return false;\n    }\n    this.clearTimers(task);\n    delete this.loaders[loaderId].tasks[taskId];\n    return true;\n  }\n\n  /**\n   * Set delay timer, if `delay` > 0\n   *\n   * @docs-private\n   * @returns boolean\n   */\n  private setDelayTimer(task: Task, loaderId: string): boolean {\n    if (task.delay > MIN_DELAY) {\n      if (task.isDelayed) {\n        return true;\n      }\n      if (!task.delayTimer) {\n        task.isDelayed = true;\n        task.delayTimer = setTimeout(() => {\n          task.isDelayed = false;\n          if (task.isForeground) {\n            this.startLoader(loaderId, task.taskId);\n          } else {\n            this.startBackgroundLoader(loaderId, task.taskId);\n          }\n        }, task.delay);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set maxTimer if `maxTime` > `minTime`\n   *\n   * @docs-private\n   * @returns boolean\n   */\n  private setMaxTimer(task: Task, loaderId: string): void {\n    if (task.maxTime > task.minTime) {\n      // restart the task, reset maxTimer\n      clearTimeout(task.maxTimer);\n      task.maxTimer = setTimeout(() => {\n        if (task.isForeground) {\n          this.stopLoader(loaderId, task.taskId);\n        } else {\n          this.stopBackgroundLoader(loaderId, task.taskId);\n        }\n      }, task.maxTime);\n    }\n  }\n\n  /**\n   * Set minTimer if `startAt` + `minTime` > `Date.now()`\n   *\n   * @docs-private\n   * @returns boolean\n   */\n  private setMinTimer(task: Task, loaderId: string): boolean {\n    const now = Date.now();\n    if (task.startAt) {\n      if (task.startAt + task.minTime > now) {\n        task.minTimer = setTimeout(() => {\n          if (task.isForeground) {\n            this.stopLoader(loaderId, task.taskId);\n          } else {\n            this.stopBackgroundLoader(loaderId, task.taskId);\n          }\n        }, task.startAt + task.minTime - now);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","/* eslint-disable @angular-eslint/component-selector */\nimport {\n  Component,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  SimpleChange,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  TemplateRef,\n} from '@angular/core';\nimport {\n  DomSanitizer,\n  SafeResourceUrl,\n  SafeStyle,\n} from '@angular/platform-browser';\nimport { NgxUiLoaderService } from './ngx-ui-loader.service';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { NgxUiLoaderConfig } from '../utils/interfaces';\nimport { DirectionType, PositionType, SpinnerType } from '../utils/types';\nimport { POSITION } from '../utils/enums';\nimport { SPINNER_CONFIG } from '../utils/constants';\nimport { ShowEvent } from '../utils/interfaces';\n\n@Component({\n  selector: 'ngx-ui-loader',\n  templateUrl: './ngx-ui-loader.component.html',\n  styleUrls: ['./ngx-ui-loader.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxUiLoaderComponent implements OnChanges, OnDestroy, OnInit {\n  @Input() bgsColor: string;\n  @Input() bgsOpacity: number;\n  @Input() bgsPosition: PositionType;\n  @Input() bgsSize: number;\n  @Input() bgsTemplate: TemplateRef<any>;\n  @Input() bgsType: SpinnerType;\n  @Input() fgsColor: string;\n  @Input() fgsPosition: PositionType;\n  @Input() fgsSize: number;\n  @Input() fgsTemplate: TemplateRef<any>;\n  @Input() fgsType: SpinnerType;\n  @Input() gap: number;\n  @Input() loaderId: string;\n  @Input() logoPosition: PositionType;\n  @Input() logoSize: number;\n  @Input() logoUrl: string;\n  @Input() overlayBorderRadius: string;\n  @Input() overlayColor: string;\n  @Input() pbColor: string;\n  @Input() pbDirection: DirectionType;\n  @Input() pbThickness: number;\n  @Input() hasProgressBar: boolean;\n  @Input() text: string;\n  @Input() textColor: string;\n  @Input() textPosition: PositionType;\n\n  fastFadeOut: boolean;\n  fgDivs: number[];\n  fgSpinnerClass: string;\n  bgDivs: number[];\n  bgSpinnerClass: string;\n  showForeground: boolean;\n  showBackground: boolean;\n  foregroundClosing: boolean;\n  backgroundClosing: boolean;\n\n  trustedLogoUrl: SafeResourceUrl;\n  logoTop: SafeStyle;\n  spinnerTop: SafeStyle;\n  textTop: SafeStyle;\n\n  showForegroundWatcher: Subscription;\n  showBackgroundWatcher: Subscription;\n  foregroundClosingWatcher: Subscription;\n  backgroundClosingWatcher: Subscription;\n\n  defaultConfig: NgxUiLoaderConfig;\n  initialized: boolean;\n\n  /**\n   * Constructor\n   */\n  constructor(\n    private domSanitizer: DomSanitizer,\n    private changeDetectorRef: ChangeDetectorRef,\n    private ngxService: NgxUiLoaderService\n  ) {\n    this.initialized = false;\n    this.defaultConfig = this.ngxService.getDefaultConfig();\n\n    this.bgsColor = this.defaultConfig.bgsColor;\n    this.bgsOpacity = this.defaultConfig.bgsOpacity;\n    this.bgsPosition = this.defaultConfig.bgsPosition;\n    this.bgsSize = this.defaultConfig.bgsSize;\n    this.bgsType = this.defaultConfig.bgsType;\n    this.fastFadeOut = this.defaultConfig.fastFadeOut;\n    this.fgsColor = this.defaultConfig.fgsColor;\n    this.fgsPosition = this.defaultConfig.fgsPosition;\n    this.fgsSize = this.defaultConfig.fgsSize;\n    this.fgsType = this.defaultConfig.fgsType;\n    this.gap = this.defaultConfig.gap;\n    this.loaderId = this.defaultConfig.masterLoaderId;\n    this.logoPosition = this.defaultConfig.logoPosition;\n    this.logoSize = this.defaultConfig.logoSize;\n    this.logoUrl = this.defaultConfig.logoUrl;\n    this.overlayBorderRadius = this.defaultConfig.overlayBorderRadius;\n    this.overlayColor = this.defaultConfig.overlayColor;\n    this.pbColor = this.defaultConfig.pbColor;\n    this.pbDirection = this.defaultConfig.pbDirection;\n    this.pbThickness = this.defaultConfig.pbThickness;\n    this.hasProgressBar = this.defaultConfig.hasProgressBar;\n    this.text = this.defaultConfig.text;\n    this.textColor = this.defaultConfig.textColor;\n    this.textPosition = this.defaultConfig.textPosition;\n  }\n\n  /**\n   * On init event\n   */\n  ngOnInit() {\n    this.initializeSpinners();\n    this.ngxService.bindLoaderData(this.loaderId);\n    this.determinePositions();\n\n    this.trustedLogoUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(\n      this.logoUrl\n    );\n\n    this.showForegroundWatcher = this.ngxService.showForeground$\n      .pipe(\n        filter((showEvent: ShowEvent) => this.loaderId === showEvent.loaderId)\n      )\n      .subscribe((data) => {\n        this.showForeground = data.isShow;\n        this.changeDetectorRef.markForCheck();\n      });\n\n    this.showBackgroundWatcher = this.ngxService.showBackground$\n      .pipe(\n        filter((showEvent: ShowEvent) => this.loaderId === showEvent.loaderId)\n      )\n      .subscribe((data) => {\n        this.showBackground = data.isShow;\n        this.changeDetectorRef.markForCheck();\n      });\n\n    this.foregroundClosingWatcher = this.ngxService.foregroundClosing$\n      .pipe(\n        filter((showEvent: ShowEvent) => this.loaderId === showEvent.loaderId)\n      )\n      .subscribe((data) => {\n        this.foregroundClosing = data.isShow;\n        this.changeDetectorRef.markForCheck();\n      });\n\n    this.backgroundClosingWatcher = this.ngxService.backgroundClosing$\n      .pipe(\n        filter((showEvent: ShowEvent) => this.loaderId === showEvent.loaderId)\n      )\n      .subscribe((data) => {\n        this.backgroundClosing = data.isShow;\n        this.changeDetectorRef.markForCheck();\n      });\n    this.initialized = true;\n  }\n\n  /**\n   * On changes event\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.initialized) {\n      return;\n    }\n\n    const bgsTypeChange: SimpleChange = changes.bgsType;\n    const fgsTypeChange: SimpleChange = changes.fgsType;\n    const logoUrlChange: SimpleChange = changes.logoUrl;\n\n    if (fgsTypeChange || bgsTypeChange) {\n      this.initializeSpinners();\n    }\n\n    this.determinePositions();\n\n    if (logoUrlChange) {\n      this.trustedLogoUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(\n        this.logoUrl\n      );\n    }\n  }\n\n  /**\n   * On destroy event\n   */\n  ngOnDestroy() {\n    this.ngxService.destroyLoaderData(this.loaderId);\n    if (this.showForegroundWatcher) {\n      this.showForegroundWatcher.unsubscribe();\n    }\n    if (this.showBackgroundWatcher) {\n      this.showBackgroundWatcher.unsubscribe();\n    }\n    if (this.foregroundClosingWatcher) {\n      this.foregroundClosingWatcher.unsubscribe();\n    }\n    if (this.backgroundClosingWatcher) {\n      this.backgroundClosingWatcher.unsubscribe();\n    }\n  }\n\n  /**\n   * Initialize spinners\n   */\n  private initializeSpinners(): void {\n    this.fgDivs = Array(SPINNER_CONFIG[this.fgsType].divs).fill(1);\n    this.fgSpinnerClass = SPINNER_CONFIG[this.fgsType].class;\n    this.bgDivs = Array(SPINNER_CONFIG[this.bgsType].divs).fill(1);\n    this.bgSpinnerClass = SPINNER_CONFIG[this.bgsType].class;\n  }\n\n  /**\n   * Determine the positions of spinner, logo and text\n   */\n  private determinePositions(): void {\n    this.logoTop = 'initial';\n    this.spinnerTop = 'initial';\n    this.textTop = 'initial';\n    const textSize = 24;\n\n    if (this.logoPosition.startsWith('center')) {\n      this.logoTop = '50%';\n    } else if (this.logoPosition.startsWith('top')) {\n      this.logoTop = '30px';\n    }\n\n    if (this.fgsPosition.startsWith('center')) {\n      this.spinnerTop = '50%';\n    } else if (this.fgsPosition.startsWith('top')) {\n      this.spinnerTop = '30px';\n    }\n\n    if (this.textPosition.startsWith('center')) {\n      this.textTop = '50%';\n    } else if (this.textPosition.startsWith('top')) {\n      this.textTop = '30px';\n    }\n\n    if (this.fgsPosition === POSITION.centerCenter) {\n      if (this.logoUrl && this.logoPosition === POSITION.centerCenter) {\n        if (this.text && this.textPosition === POSITION.centerCenter) {\n          // logo, spinner and text\n          this.logoTop = this.domSanitizer.bypassSecurityTrustStyle(\n            `calc(50% - ${this.fgsSize / 2}px - ${textSize / 2}px - ${\n              this.gap\n            }px)`\n          );\n          this.spinnerTop = this.domSanitizer.bypassSecurityTrustStyle(\n            `calc(50% + ${this.logoSize / 2}px - ${textSize / 2}px)`\n          );\n          this.textTop = this.domSanitizer.bypassSecurityTrustStyle(\n            `calc(50% + ${this.logoSize / 2}px + ${this.gap}px + ${\n              this.fgsSize / 2\n            }px)`\n          );\n        } else {\n          // logo and spinner\n          this.logoTop = this.domSanitizer.bypassSecurityTrustStyle(\n            `calc(50% - ${this.fgsSize / 2}px - ${this.gap / 2}px)`\n          );\n          this.spinnerTop = this.domSanitizer.bypassSecurityTrustStyle(\n            `calc(50% + ${this.logoSize / 2}px + ${this.gap / 2}px)`\n          );\n        }\n      } else {\n        if (this.text && this.textPosition === POSITION.centerCenter) {\n          // spinner and text\n          this.spinnerTop = this.domSanitizer.bypassSecurityTrustStyle(\n            `calc(50% - ${textSize / 2}px - ${this.gap / 2}px)`\n          );\n          this.textTop = this.domSanitizer.bypassSecurityTrustStyle(\n            `calc(50% + ${this.fgsSize / 2}px + ${this.gap / 2}px)`\n          );\n        }\n      }\n    } else {\n      if (\n        this.logoUrl &&\n        this.logoPosition === POSITION.centerCenter &&\n        this.text &&\n        this.textPosition === POSITION.centerCenter\n      ) {\n        // logo and text\n        this.logoTop = this.domSanitizer.bypassSecurityTrustStyle(\n          `calc(50% - ${textSize / 2}px - ${this.gap / 2}px)`\n        );\n        this.textTop = this.domSanitizer.bypassSecurityTrustStyle(\n          `calc(50% + ${this.logoSize / 2}px + ${this.gap / 2}px)`\n        );\n      }\n    }\n  }\n}\n","/* eslint-disable @angular-eslint/directive-selector */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnDestroy,\n  Renderer2,\n  OnInit,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { NgxUiLoaderService } from './ngx-ui-loader.service';\nimport { ShowEvent } from '../utils/interfaces';\nimport {\n  FOREGROUND,\n  OVERLAY_DISAPPEAR_TIME,\n  FAST_OVERLAY_DISAPPEAR_TIME,\n} from '../utils/constants';\n\n@Directive({ selector: '[ngxUiLoaderBlurred]' })\nexport class NgxUiLoaderBlurredDirective implements OnInit, OnDestroy {\n  @Input() blur: number;\n  @Input() loaderId: string;\n\n  showForegroundWatcher: Subscription;\n  fastFadeOut: boolean;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private loader: NgxUiLoaderService\n  ) {\n    this.blur = this.loader.getDefaultConfig().blur;\n    this.loaderId = this.loader.getDefaultConfig().masterLoaderId;\n    this.fastFadeOut = this.loader.getDefaultConfig().fastFadeOut;\n  }\n\n  /**\n   * On Init event\n   */\n  ngOnInit() {\n    this.showForegroundWatcher = this.loader.showForeground$\n      .pipe(\n        filter((showEvent: ShowEvent) => this.loaderId === showEvent.loaderId)\n      )\n      .subscribe((data) => {\n        if (data.isShow) {\n          const filterValue = `blur(${this.blur}px)`;\n          this.renderer.setStyle(\n            this.elementRef.nativeElement,\n            '-webkit-filter',\n            filterValue\n          );\n          this.renderer.setStyle(\n            this.elementRef.nativeElement,\n            'filter',\n            filterValue\n          );\n        } else {\n          setTimeout(\n            () => {\n              if (!this.loader.hasRunningTask(FOREGROUND, data.loaderId)) {\n                this.renderer.setStyle(\n                  this.elementRef.nativeElement,\n                  '-webkit-filter',\n                  'none'\n                );\n                this.renderer.setStyle(\n                  this.elementRef.nativeElement,\n                  'filter',\n                  'none'\n                );\n              }\n            },\n            this.fastFadeOut\n              ? FAST_OVERLAY_DISAPPEAR_TIME\n              : OVERLAY_DISAPPEAR_TIME\n          );\n        }\n      });\n  }\n\n  /**\n   * On destroy event\n   */\n  ngOnDestroy() {\n    if (this.showForegroundWatcher) {\n      this.showForegroundWatcher.unsubscribe();\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxUiLoaderComponent } from './ngx-ui-loader.component';\nimport { NgxUiLoaderBlurredDirective } from './ngx-ui-loader-blurred.directive';\nimport { NGX_UI_LOADER_CONFIG_TOKEN } from './ngx-ui-loader-config.token';\nimport { NgxUiLoaderConfig } from '../utils/interfaces';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxUiLoaderComponent, NgxUiLoaderBlurredDirective],\n  exports: [NgxUiLoaderComponent, NgxUiLoaderBlurredDirective],\n})\nexport class NgxUiLoaderModule {\n  /**\n   * forRoot\n   *\n   * @returns A module with its provider dependencies\n   */\n  static forRoot(\n    ngxUiLoaderConfig: NgxUiLoaderConfig\n  ): ModuleWithProviders<NgxUiLoaderModule> {\n    return {\n      ngModule: NgxUiLoaderModule,\n      providers: [\n        {\n          provide: NGX_UI_LOADER_CONFIG_TOKEN,\n          useValue: ngxUiLoaderConfig,\n        },\n      ],\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NgxUiLoaderRouterConfig } from '../utils/interfaces';\n\n/**\n * Injection token for ngx-ui-loader-router configuration\n */\nexport const NGX_UI_LOADER_ROUTER_CONFIG_TOKEN = new InjectionToken<NgxUiLoaderRouterConfig>(\n  'ngxUiLoaderRouterCustom.config'\n);\n","/* eslint-disable prefer-arrow/prefer-arrow-functions */\nimport { Config, Exclude } from './interfaces';\n\nexport function getExcludeObj(config: Config): Exclude {\n  let strs: string[];\n  let regExps: RegExp[];\n\n  if (config) {\n    if (config.exclude) {\n      strs = config.exclude.map((url) => url.toLowerCase());\n    }\n\n    if (config.excludeRegexp) {\n      regExps = config.excludeRegexp.map((regexp) => new RegExp(regexp, 'i'));\n    }\n  }\n\n  return { strs, regExps };\n}\n\nexport function isIgnored(\n  url: string,\n  excludeStrings: string[],\n  excludeRegexps: RegExp[]\n): boolean {\n  if (excludeStrings) {\n    // do not show the loader for urls in the `exclude` list\n    if (\n      excludeStrings.findIndex((str) => url.toLowerCase().startsWith(str)) !==\n      -1\n    ) {\n      return true;\n    }\n  }\n\n  if (excludeRegexps) {\n    // do not show the loader for urls which matches regexps in the `excludeRegexp` list\n    if (excludeRegexps.findIndex((regexp) => regexp.test(url)) !== -1) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Inject,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\n\nimport { NgxUiLoaderService } from '../core/ngx-ui-loader.service';\nimport { NgxUiLoaderRouterConfig } from '../utils/interfaces';\nimport { NGX_UI_LOADER_ROUTER_CONFIG_TOKEN } from './ngx-ui-loader-router-config.token';\nimport { ROUTER_LOADER_TASK_ID } from '../utils/constants';\nimport { getExcludeObj, isIgnored } from '../utils/functions';\nimport { Exclude } from '../utils/interfaces';\n\n@NgModule({})\nexport class NgxUiLoaderRouterModule {\n  private exclude: Exclude;\n\n  /**\n   * Constructor\n   */\n  constructor(\n    @Optional() @SkipSelf() parentModule: NgxUiLoaderRouterModule,\n    @Optional()\n    @Inject(NGX_UI_LOADER_ROUTER_CONFIG_TOKEN)\n    customConfig: NgxUiLoaderRouterConfig,\n    router: Router,\n    loader: NgxUiLoaderService\n  ) {\n    if (parentModule) {\n      throw new Error(\n        '[ngx-ui-loader] - NgxUiLoaderRouterModule is already loaded. It should be imported in the root `AppModule` only!'\n      );\n    }\n\n    let config: NgxUiLoaderRouterConfig = {\n      loaderId: loader.getDefaultConfig().masterLoaderId,\n      showForeground: true,\n    };\n\n    this.exclude = getExcludeObj(customConfig);\n\n    if (customConfig) {\n      config = { ...config, ...customConfig };\n    }\n\n    router.events.subscribe((event: RouterEvent) => {\n      if (event instanceof NavigationStart) {\n        if (!isIgnored(event.url, this.exclude.strs, this.exclude.regExps)) {\n          if (config.showForeground) {\n            loader.startLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n          } else {\n            loader.startBackgroundLoader(\n              config.loaderId,\n              ROUTER_LOADER_TASK_ID\n            );\n          }\n        }\n      }\n\n      if (\n        event instanceof NavigationEnd ||\n        event instanceof NavigationCancel ||\n        event instanceof NavigationError\n      ) {\n        if (!isIgnored(event.url, this.exclude.strs, this.exclude.regExps)) {\n          if (config.showForeground) {\n            loader.stopLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n          } else {\n            loader.stopBackgroundLoader(config.loaderId, ROUTER_LOADER_TASK_ID);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * forRoot\n   *\n   * @returns A module with its provider dependencies\n   */\n  static forRoot(\n    routerConfig: NgxUiLoaderRouterConfig\n  ): ModuleWithProviders<NgxUiLoaderRouterModule> {\n    return {\n      ngModule: NgxUiLoaderRouterModule,\n      providers: [\n        {\n          provide: NGX_UI_LOADER_ROUTER_CONFIG_TOKEN,\n          useValue: routerConfig,\n        },\n      ],\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NgxUiLoaderHttpConfig } from '../utils/interfaces';\n\n/**\n * Injection token for ngx-ui-loader-http configuration\n */\nexport const NGX_UI_LOADER_HTTP_CONFIG_TOKEN = new InjectionToken<NgxUiLoaderHttpConfig>(\n  'ngxUiLoaderHttpCustom.config'\n);\n","import { Injectable, Inject, Optional } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpEvent,\n  HttpHandler,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { NgxUiLoaderService } from '../core/ngx-ui-loader.service';\nimport { NGX_UI_LOADER_HTTP_CONFIG_TOKEN } from './ngx-ui-loader-http-config.token';\nimport { NgxUiLoaderHttpConfig } from '../utils/interfaces';\nimport { HTTP_LOADER_TASK_ID } from '../utils/constants';\nimport { getExcludeObj, isIgnored } from '../utils/functions';\nimport { Exclude } from '../utils/interfaces';\n\n@Injectable()\nexport class NgxUiLoaderHttpInterceptor implements HttpInterceptor {\n  private count: number;\n  private config: NgxUiLoaderHttpConfig;\n  private exclude: Exclude;\n\n  /**\n   * Constructor\n   */\n  constructor(\n    @Optional()\n    @Inject(NGX_UI_LOADER_HTTP_CONFIG_TOKEN)\n    customConfig: NgxUiLoaderHttpConfig,\n    private loader: NgxUiLoaderService\n  ) {\n    this.count = 0;\n    this.config = {\n      loaderId: this.loader.getDefaultConfig().masterLoaderId,\n      showForeground: false,\n    };\n\n    this.exclude = getExcludeObj(customConfig);\n\n    if (customConfig) {\n      this.config = { ...this.config, ...customConfig };\n    }\n  }\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (isIgnored(req.url, this.exclude.strs, this.exclude.regExps)) {\n      return next.handle(req);\n    }\n\n    this.count++;\n    if (this.config.showForeground) {\n      this.loader.startLoader(\n        this.config.loaderId,\n        HTTP_LOADER_TASK_ID,\n        this.config\n      );\n    } else {\n      this.loader.startBackgroundLoader(\n        this.config.loaderId,\n        HTTP_LOADER_TASK_ID,\n        this.config\n      );\n    }\n\n    return next.handle(req).pipe(\n      finalize(() => {\n        this.count--;\n        if (this.count === 0) {\n          if (this.config.showForeground) {\n            this.loader.stopLoader(this.config.loaderId, HTTP_LOADER_TASK_ID);\n          } else {\n            this.loader.stopBackgroundLoader(\n              this.config.loaderId,\n              HTTP_LOADER_TASK_ID\n            );\n          }\n        }\n      })\n    );\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { NgxUiLoaderHttpInterceptor } from './ngx-ui-loader-http.interceptor';\nimport { NgxUiLoaderHttpConfig } from '../utils/interfaces';\nimport { NGX_UI_LOADER_HTTP_CONFIG_TOKEN } from './ngx-ui-loader-http-config.token';\n\n@NgModule({\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: NgxUiLoaderHttpInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class NgxUiLoaderHttpModule {\n  /**\n   * Constructor\n   */\n  constructor(@Optional() @SkipSelf() parentModule: NgxUiLoaderHttpModule) {\n    if (parentModule) {\n      throw new Error(\n        '[ngx-ui-loader] - NgxUiLoaderHttpModule is already loaded. It should be imported in the root `AppModule` only!'\n      );\n    }\n  }\n\n  /**\n   * forRoot\n   *\n   * @returns A module with its provider dependencies\n   */\n  static forRoot(\n    httpConfig: NgxUiLoaderHttpConfig\n  ): ModuleWithProviders<NgxUiLoaderHttpModule> {\n    return {\n      ngModule: NgxUiLoaderHttpModule,\n      providers: [\n        {\n          provide: NGX_UI_LOADER_HTTP_CONFIG_TOKEN,\n          useValue: httpConfig,\n        },\n      ],\n    };\n  }\n}\n"]}